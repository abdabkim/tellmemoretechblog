"use client"

import { useEffect, useState } from "react"
import { motion } from "framer-motion"

export default function SvelteExplorePage() {
  const [scrollY, setScrollY] = useState(0)

  useEffect(() => {
    const handleScroll = () => setScrollY(window.scrollY)
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  const handleREPLClick = () => {
    alert('Svelte REPL coming soon!')
  }

  const handleRoadmapClick = () => {
    alert('‚ö° Svelte roadmap coming soon!')
  }

  const magicFeatures = [
    {
      icon: "üéØ",
      title: "No Runtime Framework",
      description: "Svelte compiles your components into optimized JavaScript at build time. The framework itself disappears, leaving behind lean, fast code that runs without any framework overhead in the browser.",
      highlight: "Zero Runtime Cost"
    },
    {
      icon: "üì¶",
      title: "Tiny Bundle Sizes",
      description: "Because there's no framework to ship, Svelte apps are incredibly small. A typical Svelte app is often 10x smaller than equivalent React or Vue apps, leading to faster downloads and startup times.",
      highlight: "Minimal JavaScript"
    },
    {
      icon: "‚ö°",
      title: "Blazing Performance",
      description: "No virtual DOM diffing, no runtime checks - just direct DOM manipulation generated by the compiler. Svelte apps start fast, run fast, and feel incredibly responsive to user interactions.",
      highlight: "Native Speed"
    },
    {
      icon: "üß†",
      title: "Truly Reactive",
      description: "Svelte's reactivity is built into the language itself. Simple assignments trigger updates automatically - no hooks, no observables, no complex state management required.",
      highlight: "Built-in Reactivity"
    },
    {
      icon: "‚ú®",
      title: "Write Less Code",
      description: "Svelte's syntax is clean and intuitive. Components are just HTML, CSS, and JavaScript with minimal boilerplate. You write less code to accomplish the same goals as other frameworks.",
      highlight: "Concise Syntax"
    },
    {
      icon: "üé®",
      title: "Built-in Animations",
      description: "Transitions and animations are first-class citizens in Svelte. Create smooth, professional animations with simple directives - no external libraries required.",
      highlight: "Animation First"
    }
  ]

  const bundleSizes = [
    { framework: "Svelte", size: "1.6kb", isWinner: true },
    { framework: "Vue", size: "34kb", isWinner: false },
    { framework: "React", size: "42kb", isWinner: false },
    { framework: "Angular", size: "130kb", isWinner: false }
  ]

  const ecosystemTools = [
    {
      icon: "üöÄ",
      title: "SvelteKit",
      description: "The official full-stack framework for Svelte. Server-side rendering, static site generation, and API routes with the same compile-time benefits as Svelte itself."
    },
    {
      icon: "‚ö°",
      title: "Vite",
      description: "Lightning-fast development with instant hot module replacement. Vite's dev server makes Svelte development incredibly fast and enjoyable."
    },
    {
      icon: "üé®",
      title: "Svelte Material UI",
      description: "Material Design components built for Svelte. Get Google's design system with Svelte's performance and simplicity."
    },
    {
      icon: "üì±",
      title: "Capacitor",
      description: "Build native mobile apps with Svelte and web technologies. Deploy your Svelte apps to iOS and Android with native performance."
    },
    {
      icon: "üñ•Ô∏è",
      title: "Tauri",
      description: "Create desktop applications with Svelte and Rust. Get native performance and security with a tiny application footprint."
    },
    {
      icon: "üß™",
      title: "Testing Library",
      description: "Test your Svelte components with confidence using Svelte Testing Library, which provides simple and complete testing utilities."
    }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-900 via-red-900 to-amber-900 text-white overflow-hidden">
      {/* Lightning Effects */}
      <div className="fixed inset-0 pointer-events-none z-10">
        {Array.from({ length: 15 }).map((_, index) => (
          <motion.div
            key={index}
            className="absolute w-1 h-20 bg-gradient-to-b from-yellow-400 via-orange-400 to-transparent opacity-30"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              transform: `rotate(${Math.random() * 360}deg)`
            }}
            animate={{
              opacity: [0, 1, 0],
              scaleY: [0.5, 1.2, 0.5],
            }}
            transition={{
              duration: 0.1 + Math.random() * 0.2,
              repeat: Number.POSITIVE_INFINITY,
              repeatDelay: 2 + Math.random() * 3,
              delay: index * 0.2,
            }}
          />
        ))}
      </div>

      {/* Floating Particles */}
      <div className="fixed inset-0 pointer-events-none z-10">
        {Array.from({ length: 25 }).map((_, index) => (
          <motion.div
            key={`particle-${index}`}
            className="absolute w-2 h-2 rounded-full bg-orange-400/30"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -20, 0],
              opacity: [0.3, 1, 0.3],
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: 3 + Math.random() * 2,
              repeat: Number.POSITIVE_INFINITY,
              delay: index * 0.1,
            }}
          />
        ))}
      </div>
      
      {/* Hero Section */}
      <section className="relative z-20 flex items-center justify-center min-h-screen px-4">
        <div className="max-w-7xl mx-auto grid md:grid-cols-2 gap-12 items-center">
          <motion.div
            className="text-center md:text-left"
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 1 }}
          >
            <motion.h1
              className="text-6xl md:text-8xl font-black mb-4 bg-gradient-to-r from-orange-400 via-yellow-400 to-red-400 bg-clip-text text-transparent"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.2 }}
            >
              Svelte
            </motion.h1>
            <motion.div
              className="text-2xl md:text-3xl font-bold text-orange-300 mb-6"
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.4 }}
            >
              The Disappearing Framework
            </motion.div>
            <motion.p
              className="text-xl md:text-2xl mb-8 text-white/90 leading-relaxed"
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.6 }}
            >
              Svelte takes a radically different approach. Instead of doing work in the browser, Svelte shifts that work into a compile step. The result? Blazingly fast apps with tiny bundle sizes and buttery smooth performance.
            </motion.p>
            <motion.button
              onClick={handleREPLClick}
              className="bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white px-8 py-4 rounded-full font-bold text-lg transition-all duration-300 hover:scale-105 hover:shadow-2xl"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.8 }}
            >
              Try Svelte REPL
            </motion.button>
          </motion.div>
          
          <motion.div
            className="flex justify-center"
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 1, delay: 1 }}
          >
            <motion.div
              className="text-9xl md:text-[12rem] filter drop-shadow-2xl"
              animate={{ 
                rotate: [0, 10, -10, 0],
                scale: [1, 1.1, 1],
                filter: ["drop-shadow(0 0 20px rgba(255,165,0,0.5))", "drop-shadow(0 0 40px rgba(255,165,0,0.8))", "drop-shadow(0 0 20px rgba(255,165,0,0.5))"]
              }}
              transition={{ 
                duration: 2, 
                repeat: Number.POSITIVE_INFINITY,
                ease: "easeInOut"
              }}
            >
              ‚ö°
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Magic Section */}
      <section className="relative z-20 py-16 px-4">
        <div className="max-w-7xl mx-auto">
          <motion.div
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-orange-400 to-yellow-400 bg-clip-text text-transparent">
              Compile-Time Magic
            </h2>
            <p className="text-xl text-white/80 max-w-4xl mx-auto leading-relaxed">
              While other frameworks run in the browser, Svelte vanishes into highly optimized vanilla JavaScript. No virtual DOM, no runtime overhead - just pure, fast code.
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {magicFeatures.map((feature, index) => (
              <motion.div
                key={index}
                className="bg-white/5 backdrop-blur-lg rounded-2xl p-8 border border-white/10 hover:bg-white/10 hover:scale-105 transition-all duration-300 group"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="text-4xl mb-4 group-hover:scale-110 transition-transform duration-300">
                  {feature.icon}
                </div>
                <h3 className="text-xl font-bold text-white mb-4">{feature.title}</h3>
                <p className="text-white/80 mb-4 leading-relaxed">{feature.description}</p>
                <span className="inline-block bg-orange-500/20 text-orange-400 px-3 py-1 rounded-full text-sm font-medium">
                  {feature.highlight}
                </span>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Bundle Size Comparison */}
      <section className="relative z-20 py-16 px-4 bg-white/5 backdrop-blur-lg">
        <div className="max-w-6xl mx-auto">
          <motion.div
            className="text-center mb-12"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-4 text-slate-900">
              The Bundle Size Revolution
            </h2>
            <p className="text-xl text-slate-600 max-w-4xl mx-auto">
              See how Svelte's compile-time approach leads to dramatically smaller applications compared to traditional runtime frameworks.
            </p>
          </motion.div>

          <motion.div
            className="mb-8"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            viewport={{ once: true }}
          >
            <h3 className="text-2xl font-bold text-slate-900 text-center mb-8">
              Hello World App Bundle Sizes
            </h3>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              {bundleSizes.map((item, index) => (
                <motion.div
                  key={index}
                  className={`text-center p-6 rounded-2xl border transition-all duration-300 hover:scale-105 ${
                    item.isWinner 
                      ? 'bg-orange-100 border-orange-400 shadow-lg shadow-orange-400/20' 
                      : 'bg-white/80 border-slate-200'
                  }`}
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  viewport={{ once: true }}
                >
                  <div className={`font-bold text-lg mb-2 ${item.isWinner ? 'text-orange-700' : 'text-slate-800'}`}>
                    {item.framework}
                    {item.isWinner && <span className="ml-2">üëë</span>}
                  </div>
                  <div className={`text-3xl font-black mb-1 ${item.isWinner ? 'text-orange-600' : 'text-slate-700'}`}>
                    {item.size}
                  </div>
                  <div className="text-sm text-slate-600">Gzipped</div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          <motion.div
            className="bg-white rounded-2xl p-8 border-l-4 border-orange-500"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            viewport={{ once: true }}
          >
            <p className="text-slate-600 text-lg leading-relaxed">
              <strong className="text-slate-800">üí° Why this matters:</strong> Smaller bundles mean faster downloads, quicker parse times, and better performance on slower devices and networks. Svelte apps feel instant because they are.
            </p>
          </motion.div>
        </div>
      </section>

      {/* Ecosystem Section */}
      <section className="relative z-20 py-16 px-4">
        <div className="max-w-7xl mx-auto">
          <motion.div
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
              The Svelte Universe
            </h2>
            <p className="text-xl text-white/80 max-w-3xl mx-auto leading-relaxed">
              Though newer than React or Vue, Svelte's ecosystem is rapidly growing with high-quality tools and frameworks that embrace the compile-time philosophy.
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            {ecosystemTools.map((tool, index) => (
              <motion.div
                key={index}
                className="bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 hover:border-white/40 hover:scale-105 transition-all duration-300 group"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="text-4xl mb-4 group-hover:scale-110 transition-transform duration-300">
                  {tool.icon}
                </div>
                <h4 className="text-xl font-bold text-white mb-4">{tool.title}</h4>
                <p className="text-white/80 leading-relaxed">{tool.description}</p>
              </motion.div>
            ))}
          </div>

          <motion.div
            className="text-center"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            viewport={{ once: true }}
          >
            <button
              onClick={handleRoadmapClick}
              className="bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white px-10 py-4 rounded-full font-bold text-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl"
            >
              Start Building with Svelte
            </button>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="relative z-20 py-8 px-4 border-t border-white/10">
        <div className="max-w-6xl mx-auto text-center">
          <p className="text-white/60">
            Tell Me More Tech - Svelte Explorer loaded with lightning speed! ‚ö°
          </p>
        </div>
      </footer>
    </div>
  )
}